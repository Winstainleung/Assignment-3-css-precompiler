"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_1 = require("./unit");
var UnitConversionNetwork = /** @class */ (function () {
    function UnitConversionNetwork() {
        this.edges = {};
    }
    UnitConversionNetwork.prototype.addEdge = function (left, leftRate, right, rightRate) {
        if (!this.edges[left])
            this.edges[left] = {};
        if (this.edges[left][right])
            throw new Error('duplicate edge');
        this.edges[left][right] = { leftRate: leftRate, rightRate: rightRate };
    };
    UnitConversionNetwork.prototype.addRate = function (num, numUnit, denom, denomUnit) {
        this.rates = undefined;
        var numRate = numUnit.mul(unit_1.Unit.one(num));
        var denomRate = denomUnit.mul(unit_1.Unit.one(denom));
        this.addEdge(numUnit.termsKey(), numRate, denomUnit.termsKey(), denomRate);
        this.addEdge(denomUnit.termsKey(), denomRate, numUnit.termsKey(), numRate);
    };
    UnitConversionNetwork.prototype.computeRates = function () {
        var _this = this;
        if (this.rates)
            return this.rates;
        this.rates = {};
        var rates = this.rates;
        var walk = function (fromK, leftK, pathRate, visited) {
            for (var rightK in _this.edges[leftK]) {
                if (rightK === fromK || visited[rightK])
                    continue;
                visited[rightK] = true;
                var _a = _this.edges[leftK][rightK], leftRate = _a.leftRate, rightRate = _a.rightRate;
                var rate = pathRate.mul(leftRate.div(rightRate));
                if (rates[rate.termsKey()] != null)
                    throw new Error('duplicate rate');
                rates[rate.termsKey()] = rate;
                walk(fromK, rightK, rate, visited);
            }
        };
        for (var fromK in this.edges)
            walk(fromK, fromK, unit_1.Unit.one(), {});
        return rates;
    };
    UnitConversionNetwork.prototype.getConversionUnit = function (from, to) {
        var rates = this.computeRates();
        var rateU = to.div(from);
        return rates[rateU.termsKey()];
    };
    return UnitConversionNetwork;
}());
exports.UnitConversionNetwork = UnitConversionNetwork;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2lvbi1uZXR3b3JrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnZlcnNpb24tbmV0d29yay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUE4QjtBQU85QjtJQUFBO1FBQ1ksVUFBSyxHQUFtRCxFQUFHLENBQUM7SUF3RHhFLENBQUM7SUF0RFcsdUNBQU8sR0FBZixVQUFnQixJQUFZLEVBQUUsUUFBYyxFQUFFLEtBQWEsRUFBRSxTQUFlO1FBQ3hFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUcsQ0FBQztRQUMzQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxVQUFBLEVBQUUsU0FBUyxXQUFBLEVBQUUsQ0FBQztJQUN0RCxDQUFDO0lBRUQsdUNBQU8sR0FBUCxVQUFRLEdBQVcsRUFBRSxPQUFhLEVBQUUsS0FBYSxFQUFFLFNBQWU7UUFDOUQsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7UUFDdkIsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekMsSUFBSSxTQUFTLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFJTyw0Q0FBWSxHQUFwQjtRQUFBLGlCQTZCQztRQTVCRyxJQUFJLElBQUksQ0FBQyxLQUFLO1lBQ1YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRyxDQUFDO1FBQ2pCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFdkIsSUFBSSxJQUFJLEdBQUcsVUFDUCxLQUFhLEVBQ2IsS0FBYSxFQUNiLFFBQWMsRUFDZCxPQUFpQztZQUVqQyxLQUFLLElBQUksTUFBTSxJQUFJLEtBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2xDLElBQUksTUFBTSxLQUFLLEtBQUssSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDO29CQUNuQyxTQUFTO2dCQUNiLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7Z0JBQ25CLElBQUEsK0JBQW1ELEVBQWpELHNCQUFRLEVBQUUsd0JBQVMsQ0FBK0I7Z0JBQ3hELElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNqRCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxJQUFJO29CQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3RDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQzthQUN0QztRQUNMLENBQUMsQ0FBQztRQUVGLEtBQUssSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUs7WUFDeEIsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsV0FBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUcsQ0FBQyxDQUFDO1FBRXhDLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxpREFBaUIsR0FBakIsVUFBa0IsSUFBVSxFQUFFLEVBQVE7UUFDbEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2hDLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNMLDRCQUFDO0FBQUQsQ0FBQyxBQXpERCxJQXlEQztBQXpEWSxzREFBcUI7QUF5RGpDLENBQUMifQ==