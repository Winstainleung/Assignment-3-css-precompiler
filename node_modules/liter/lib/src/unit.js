"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var baseNames = [
    'meter',
    'kilogram',
    'second',
    'ampere',
    'kelvin',
    'mole',
    'candela',
    'radian',
    'steradian',
];
var baseIndexes = {};
baseNames.forEach(function (name, i) { return baseIndexes[name] = i; });
var zeroTerm = baseNames.map(function (_) { return 0; });
function nameCombine(n1, n2) {
    var names = __assign({}, n1);
    for (var _i = 0, _a = Object.keys(n2); _i < _a.length; _i++) {
        var k = _a[_i];
        names[k] = (names[k] || 0) + n2[k];
    }
    return names;
}
function customTermsCombine(t1, t2) {
    var customTerms = undefined;
    if (!t1)
        return t2;
    if (!t2)
        return t1;
    for (var _i = 0, _a = Object.keys(t1).concat(Object.keys(t2)); _i < _a.length; _i++) {
        var t = _a[_i];
        var term = (t1[t] || 0) + (t2[t] || 0);
        if (term) {
            if (customTerms == null)
                customTerms = {};
            customTerms[t] = term;
        }
    }
    return customTerms;
}
var Unit = /** @class */ (function () {
    function Unit(terms, customTerms, name, m, mode) {
        if (name === void 0) { name = {}; }
        if (m === void 0) { m = [1, 0]; }
        if (mode === void 0) { mode = 'normal'; }
        this.terms = terms;
        this.customTerms = customTerms;
        this.name = name;
        this.m = m;
        this.mode = mode;
    }
    Unit.prototype.set = function (proto) {
        return new Unit(proto.terms || this.terms, proto.customTerms || this.customTerms, proto.name || this.name, proto.m || this.m, proto.mode || this.mode);
    };
    Unit.base = function (name) {
        var baseIndex = baseIndexes[name];
        var terms = zeroTerm;
        if (baseIndex != null) {
            terms = terms.slice();
            terms[baseIndex] = 1;
        }
        var customTerms = baseIndex == null ? (_a = {}, _a[name] = 1, _a) : undefined;
        return new Unit(terms, customTerms, (_b = {}, _b[name] = 1, _b));
        var _a, _b;
    };
    Unit.one = function (m0, m1) {
        if (m0 === void 0) { m0 = 1; }
        if (m1 === void 0) { m1 = 0; }
        return new Unit(zeroTerm, undefined, {}, [m0, m1]);
    };
    Unit.prototype.baseFormat = function () {
        var _a = this, terms = _a.terms, mode = _a.mode;
        var o = [];
        if (mode !== 'normal')
            o.push(mode);
        for (var i = 0; i < baseNames.length; ++i) {
            if (terms[i] === 1)
                o.push(baseNames[i]);
            else if (terms[i] !== 0)
                o.push(baseNames[i] + "^" + terms[i]);
        }
        if (this.customTerms) {
            for (var term in this.customTerms)
                if (this.customTerms[term] === 1)
                    o.push(term);
                else if (this.customTerms[term] !== 0)
                    o.push(term + "^" + this.customTerms[term]);
        }
        return o.join(' ');
    };
    Unit.prototype.nameFormat = function () {
        var _a = this, name = _a.name, m = _a.m;
        var o = [];
        for (var _i = 0, _b = Object.keys(name); _i < _b.length; _i++) {
            var k = _b[_i];
            if (name[k] === 1)
                o.push(k);
            else if (typeof (name[k]) === 'number' && name[k] !== 0)
                o.push(k + "^" + name[k].toString());
        }
        return o.join(' ');
    };
    Unit.prototype.termsKey = function () {
        if (!this.cachedTermsKey) {
            var key = this.terms.slice();
            if (this.customTerms) {
                for (var _i = 0, _a = Object.keys(this.customTerms).sort(); _i < _a.length; _i++) {
                    var term = _a[_i];
                    key.push(term);
                    key.push(this.customTerms[term]);
                }
            }
            this.cachedTermsKey = JSON.stringify(key);
        }
        return this.cachedTermsKey;
    };
    Unit.prototype.sameTerms = function (rhs) {
        for (var i = 0; i < baseNames.length; ++i) {
            if (this.terms[i] !== rhs.terms[i])
                return false;
        }
        if (this.customTerms) {
            if (!rhs.customTerms)
                return false;
            for (var _i = 0, _a = Object.keys(this.customTerms).concat(Object.keys(rhs.customTerms)); _i < _a.length; _i++) {
                var t = _a[_i];
                if ((this.customTerms[t] || 0) !== (rhs.customTerms[t] || 0))
                    return false;
            }
        }
        else {
            if (rhs.customTerms)
                return false;
        }
        return true;
    };
    Unit.prototype.isDimensionless = function () {
        return !this.customTerms && this.terms.every(function (t) { return t === 0; });
    };
    Unit.prototype.mul2 = function (rhs) {
        if (this.m[1] !== 0 || rhs.m[1] !== 0)
            throw new Error("Can't multiply offset units");
        var mode = this.mode;
        var terms = [];
        for (var i = 0; i < baseNames.length; ++i)
            terms[i] = this.terms[i] + rhs.terms[i];
        // if (terms.every(i => i == 0)) {
        //     mode = 'U/U';
        //     terms = this.terms;
        // }
        //assert(this.m[1] == 0 && rhs.m[1] == 0);
        var u = new Unit(terms, customTermsCombine(this.customTerms, rhs.customTerms), nameCombine(this.name, rhs.name), [this.m[0] * rhs.m[0], this.m[1] + rhs.m[1]], mode);
        // console.log(this, rhs);
        return [u,
            [1, -(this.m[1] + rhs.m[1])],
            [1, this.m[1]],
            [1, rhs.m[1]]];
    };
    Unit.prototype.mul = function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        return rest.reduce(function (l, r) { return l.mul2(r)[0]; }, this);
    };
    Unit.prototype.div = function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        return rest.reduce(function (l, r) { return l.mul2(r.inv())[0]; }, this);
    };
    Unit.prototype.inv = function () {
        if (this.m[1] !== 0)
            throw new Error("Can't invert offset units");
        var terms = [];
        var name = {};
        var customTerms;
        for (var i = 0; i < baseNames.length; ++i)
            terms[i] = -this.terms[i] || 0;
        for (var _i = 0, _a = Object.keys(this.name); _i < _a.length; _i++) {
            var k = _a[_i];
            name[k] = -this.name[k];
        }
        if (this.customTerms) {
            customTerms = {};
            for (var t in this.customTerms)
                customTerms[t] = -this.customTerms[t];
        }
        //assert(this.m[1] == 0);
        return new Unit(terms, customTerms, name, [1 / this.m[0], -this.m[1]]);
    };
    Unit.prototype.add = function (rhs, convert) {
        if (convert === void 0) { convert = false; }
        if (!this.sameTerms(rhs))
            throw new Error("Can not add <" + rhs.nameFormat() + "> to <" + this.nameFormat() + ">");
        if (!convert && this.m[1] !== 0 && rhs.m[1] !== 0)
            throw new Error("Can't add offset units");
        var lhs = this;
        var swap = false;
        if (lhs.m[1] === 0 && rhs.m[1] !== 0) {
            lhs = rhs;
            rhs = this;
            swap = true;
        }
        var scale = rhs.m[0] / lhs.m[0];
        // console.log('lhs', lhs, 'rhs', rhs);
        // console.log('scale', scale, 'm[1]', lhs.m[1], rhs.m[1]);
        var lm = [1, lhs.m[1]];
        var rm = [scale, scale * rhs.m[1]];
        return [lhs,
            [1, -lhs.m[1]],
            swap ? rm : lm,
            swap ? lm : rm];
    };
    Unit.prototype.delta = function () {
        var name = {};
        for (var n in this.name)
            name["delta_" + n] = this.name[n];
        return this.set({ name: name, m: [this.m[0], 0] });
    };
    Unit.prototype.sub = function (rhs) {
        if (!this.sameTerms(rhs))
            throw new Error("Can not subtract <" + rhs.nameFormat() + "> from <" + this.nameFormat() + ">");
        var scale = rhs.m[0] / this.m[0];
        if (this.m[1] === 0 && rhs.m[1] !== 0)
            throw new Error("Can't subtract offset from non-offset unit");
        var u = (this.m[1] !== 0 && rhs.m[1] !== 0) ? this.delta() : this;
        return [u,
            [1, -u.m[1]],
            [1, this.m[1]],
            [scale, scale * rhs.m[1]]];
    };
    Unit.prototype.rename = function (name) {
        return this.set({ name: (_a = {}, _a[name] = 1, _a) });
        var _a;
    };
    Unit.prototype.print = function () {
        console.log('This ', this.nameFormat());
        console.log('  base: ', this.baseFormat());
        console.log('  terms:', this.terms, this.customTerms);
        console.log('  m:    ', this.m);
    };
    Unit.prototype.inspect = function () {
        return "<Unit " + this.nameFormat() + ">";
    };
    return Unit;
}());
exports.Unit = Unit;
exports.baseUnits = {};
// console.log(baseNames);
// console.log(baseNames.length);
for (var i = 0; i < baseNames.length; ++i) {
    var terms = [];
    for (var j = 0; j < baseNames.length; ++j)
        terms[j] = (j === i) ? 1 : 0;
    exports.baseUnits[baseNames[i]] = Unit.base(baseNames[i]);
}
exports.baseUnits.one = Unit.one(1);
//# sourceMappingURL=data:application/json;base64,