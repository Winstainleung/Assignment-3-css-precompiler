export declare type UnitName = {
    [name: string]: number;
};
export declare type UnitBaseTerms = number[];
export declare type UnitCustomTerms = {
    [name: string]: number;
};
export declare type UnitM = [number, number];
export declare type IUnit = {
    terms?: UnitBaseTerms;
    customTerms?: UnitCustomTerms;
    name?: UnitName;
    m?: UnitM;
    mode?: string;
};
export declare class Unit {
    terms: UnitBaseTerms;
    customTerms: UnitCustomTerms | undefined;
    name: UnitName;
    m: UnitM;
    mode: string;
    constructor(terms: UnitBaseTerms, customTerms?: UnitCustomTerms | undefined, name?: UnitName, m?: UnitM, mode?: string);
    set(proto: IUnit): Unit;
    static base(name: string): Unit;
    static one(m0?: number, m1?: number): Unit;
    baseFormat(): string;
    nameFormat(): string;
    private cachedTermsKey?;
    termsKey(): string;
    sameTerms(rhs: Unit): boolean;
    isDimensionless(): boolean;
    mul2(rhs: Unit): [Unit, UnitM, UnitM, UnitM];
    mul(...rest: Unit[]): Unit;
    div(...rest: Unit[]): Unit;
    inv(): Unit;
    add(rhs: Unit, convert?: boolean): [Unit, UnitM, UnitM, UnitM];
    delta(): Unit;
    sub(rhs: Unit): [Unit, UnitM, UnitM, UnitM];
    rename(name: string): Unit;
    print(): void;
    inspect(): string;
}
export declare let baseUnits: {
    [name: string]: Unit;
};
