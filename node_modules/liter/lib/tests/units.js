"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../index");
var chai_1 = require("chai");
require("mocha");
var epsilon = 1e-9;
var baseUnitNames = [
    'meter',
    'kilogram',
    'second',
    'ampere',
    'kelvin',
    'mole',
    'candela',
    'radian',
    'steradian',
];
describe('Unit basics', function () {
    it('should be creatable', function () {
        var props = {
            mode: 'normal',
            name: { test: 1 },
            terms: [1, 2, 3, 4, 5, 6, 7, 8, 9],
            customTerms: { test: 1 },
            m: [1, 0],
        };
        var u = index_1.Unit.one().set(props);
        chai_1.expect(u.mode).to.equal(props.mode);
        chai_1.expect(u.name).to.deep.equal(props.name);
        chai_1.expect(u.terms).to.deep.equal(props.terms);
        chai_1.expect(u.customTerms).to.deep.equal(props.customTerms);
        chai_1.expect(u.m).to.deep.equal(props.m);
    });
    it('should have base units pre-populated', function () {
        var term = 0;
        var terms = [0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (var _i = 0, baseUnitNames_1 = baseUnitNames; _i < baseUnitNames_1.length; _i++) {
            var base = baseUnitNames_1[_i];
            var u = index_1.baseUnits[base];
            chai_1.expect(u).to.exist;
            chai_1.expect(u.nameFormat()).to.equal(base);
            chai_1.expect(u.baseFormat()).to.equal(base);
            terms[term] = 1;
            chai_1.expect(u.terms).to.deep.equal(terms);
            terms[term++] = 0;
            chai_1.expect(u.m).to.deep.equal([1, 0]);
        }
    });
    describe('Unit.one()', function () {
        it('should create a unit with appropriate m', function () {
            var u = index_1.Unit.one(42);
            chai_1.expect(u.m).to.deep.equal([42, 0]);
            u = index_1.Unit.one(5 / 9, 32);
            chai_1.expect(u.m).to.deep.equal([5 / 9, 32]);
        });
    });
    it('should add terms on multiplication', function () {
        var u = index_1.baseUnits.meter.mul(index_1.baseUnits.meter, index_1.baseUnits.kilogram, index_1.baseUnits.second);
        chai_1.expect(u).to.exist;
        chai_1.expect(u.nameFormat()).to.equal('meter^2 kilogram second');
        chai_1.expect(u.baseFormat()).to.equal('meter^2 kilogram second');
    });
    it('should subtract terms on division', function () {
        var u = index_1.baseUnits.meter.div(index_1.baseUnits.kilogram, index_1.baseUnits.second, index_1.baseUnits.second);
        chai_1.expect(u).to.exist;
        chai_1.expect(u.nameFormat()).to.equal('meter kilogram^-1 second^-2');
        chai_1.expect(u.baseFormat()).to.equal('meter kilogram^-1 second^-2');
    });
    it('should allow adding same unit', function () {
        chai_1.expect(function () { return index_1.baseUnits.meter.add(index_1.baseUnits.meter); }).to.not.throw(Error);
    });
    it('should not allow adding different unit', function () {
        chai_1.expect(function () { return index_1.baseUnits.meter.add(index_1.baseUnits.kilogram); }).to.throw('Can not add <kilogram> to <meter>');
    });
    it('should allow adding same unit', function () {
        chai_1.expect(function () { return index_1.baseUnits.meter.add(index_1.baseUnits.meter); }).to.not.throw();
        var _a = index_1.baseUnits.meter.add(index_1.baseUnits.meter), u = _a[0], om = _a[1], lm = _a[2], rm = _a[3];
        chai_1.expect(u).to.deep.equal(index_1.baseUnits.meter);
        for (var _i = 0, _b = [om, lm, rm]; _i < _b.length; _i++) {
            var m = _b[_i];
            chai_1.expect(m[0]).to.be.closeTo(1, epsilon);
            chai_1.expect(m[1]).to.be.closeTo(0, epsilon);
        }
    });
    describe('Custom bases', function () {
        it('should have correct name', function () {
            var u = index_1.Unit.base('frog');
            chai_1.expect(u.nameFormat()).to.equal('frog');
            chai_1.expect(u.baseFormat()).to.equal('frog');
        });
        it('should return false from isDimensionless()', function () {
            chai_1.expect(index_1.Unit.base('frog').isDimensionless()).to.be.false;
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0cy91bml0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUEyRDtBQUMzRCw2QkFBOEI7QUFDOUIsaUJBQWU7QUFFZixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFFbkIsSUFBSSxhQUFhLEdBQUc7SUFDaEIsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0NBQ2QsQ0FBQztBQUVGLFFBQVEsQ0FBQyxhQUFhLEVBQUU7SUFDcEIsRUFBRSxDQUFDLHFCQUFxQixFQUFFO1FBQ3RCLElBQUksS0FBSyxHQUFVO1lBQ2YsSUFBSSxFQUFFLFFBQVE7WUFDZCxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO1lBQ2pCLEtBQUssRUFBRSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFO1lBQ3BDLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7WUFDeEIsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRTtTQUNkLENBQUM7UUFDRixJQUFJLENBQUMsR0FBRyxZQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLGFBQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsYUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsYUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0MsYUFBTSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkQsYUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUU7UUFDdkMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxLQUFLLEdBQUcsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDO1FBQzFDLEtBQWlCLFVBQWEsRUFBYiwrQkFBYSxFQUFiLDJCQUFhLEVBQWIsSUFBYTtZQUF6QixJQUFJLElBQUksc0JBQUE7WUFDVCxJQUFJLENBQUMsR0FBRyxpQkFBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BCLGFBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ25CLGFBQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RDLGFBQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEIsYUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbEIsYUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsWUFBWSxFQUFFO1FBQ25CLEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtZQUMxQyxJQUFJLENBQUMsR0FBRyxZQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3JCLGFBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBRSxFQUFFLEVBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBQztZQUNyQyxDQUFDLEdBQUcsWUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3RCLGFBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBRSxDQUFDLEdBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBRSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRTtRQUNyQyxJQUFJLENBQUMsR0FBRyxpQkFBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsaUJBQUssQ0FBQyxLQUFLLEVBQUUsaUJBQUssQ0FBQyxRQUFRLEVBQUUsaUJBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRSxhQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixhQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQzNELGFBQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDL0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbUNBQW1DLEVBQUU7UUFDcEMsSUFBSSxDQUFDLEdBQUcsaUJBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGlCQUFLLENBQUMsUUFBUSxFQUFFLGlCQUFLLENBQUMsTUFBTSxFQUFFLGlCQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEUsYUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDbkIsYUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUMvRCxhQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0lBQ25FLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLCtCQUErQixFQUFFO1FBQ2hDLGFBQU0sQ0FBQyxjQUFNLE9BQUEsaUJBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGlCQUFLLENBQUMsS0FBSyxDQUFDLEVBQTVCLENBQTRCLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRTtRQUN6QyxhQUFNLENBQUMsY0FBTSxPQUFBLGlCQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxpQkFBSyxDQUFDLFFBQVEsQ0FBQyxFQUEvQixDQUErQixDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FDbEQsbUNBQW1DLENBQ3RDLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQkFBK0IsRUFBRTtRQUNoQyxhQUFNLENBQUMsY0FBTSxPQUFBLGlCQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxpQkFBSyxDQUFDLEtBQUssQ0FBQyxFQUE1QixDQUE0QixDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN0RCxJQUFBLHlEQUFnRCxFQUE5QyxTQUFDLEVBQUUsVUFBRSxFQUFFLFVBQUUsRUFBRSxVQUFFLENBQWtDO1FBQ3JELGFBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLEtBQWMsVUFBYyxFQUFkLE1BQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUUsRUFBZCxjQUFjLEVBQWQsSUFBYztZQUF2QixJQUFJLENBQUMsU0FBQTtZQUNOLGFBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdkMsYUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUMxQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGNBQWMsRUFBRTtRQUNyQixFQUFFLENBQUMsMEJBQTBCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLEdBQUcsWUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxQixhQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4QyxhQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRTtZQUM3QyxhQUFNLENBQUMsWUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQzVELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFFUCxDQUFDLENBQUMsQ0FBQyJ9